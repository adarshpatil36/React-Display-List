{"version":3,"sources":["components/ExpanableComponent.js","components/DetailsView.js","components/Data.js","components/ProgressLoader.js","components/Home.js","App.js","serviceWorker.js","index.js"],"names":["ExpanableComponent","data","className","style","padding","Message","open","content","description","onClick","MessagePopUp","DetailsView","props","MessageClosePopUp","margin","height","title","src","urlToImage","width","float","marginRight","background","marginTop","display","justifyContent","alignItems","href","url","Button","Data","columns","name","selector","sortable","fontSize","right","setState","visible","state","this","responsive","highlightOnHover","pointerOnHover","striped","overflowY","overflowYOffset","expandableRows","expandableRowsComponent","paginationDefaultPage","noHeader","React","PureComponent","ProgressLoader","message","rest","Dimmer","active","inverted","Loader","Home","fetch","then","response","json","isEmpty","articles","catch","error","console","log","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.93cd4644.chunk.js","sourcesContent":["import React from 'react'\r\nimport { Message, Button } from 'semantic-ui-react'\r\n\r\nconst ExpanableComponent = (data) => {\r\n    return (\r\n        <div className='jumbotron' style={{padding:'30px'}}>\r\n        <Message\r\n              open={true}\r\n              content={data.data.description}\r\n            /> \r\n            <button className=\"btn btn-primary\"\r\n                onClick={() => data.MessagePopUp(data)}>\r\n                {\"For more Details\"}\r\n            </button>\r\n        </div>\r\n    )\r\n}\r\nexport default ExpanableComponent;","import React from 'react'\r\nimport { Message, Button } from 'semantic-ui-react';\r\n\r\nconst DetailsView = (props)=>{\r\n    const {data, MessageClosePopUp} = props;\r\n    return (\r\n       <div style={{margin: '15px', padding: '15px'}}>\r\n            <div className='jumbotron' style={{ height: '300px', padding: '35px' }}>\r\n                <h4>{data.title} </h4>\r\n                <img src={data.urlToImage} height=\"90%\" width=\"40%\" style={{float:\"left\", marginRight: '15px',  background: 'url(loading.gif) 50% no-repeat'}}/>\r\n                <Message>\r\n                    {data.content || \"No Details Found\"}\r\n                </Message>\r\n            </div>\r\n            <div style={{marginTop:'45px', display: 'flex', justifyContent:'space-between', alignItems: 'center'}}>\r\n                <a className='btn btn-primary' href={data.url}> Click to vist the page</a>\r\n                <Button className='btn btn-primary' onClick={MessageClosePopUp} > Back to home </Button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default DetailsView;","import React from 'react';\r\nimport DataTable from 'react-data-table-component';\r\nimport ExpanableComponent from './ExpanableComponent';\r\nimport { Message, Popup, Modal } from 'semantic-ui-react'\r\nimport DetailsView from './DetailsView';\r\n\r\nclass Data extends React.PureComponent {\r\n   constructor(props){\r\n       super(props);\r\n       this.state={visible:false,\r\n    data: null};\r\n   }\r\n    columns = [\r\n    {\r\n        name: 'Title',\r\n        selector: 'title',\r\n        sortable: true,\r\n        width: '50%',\r\n        fontSize: '20%',\r\n    },{\r\n        name: 'Author',\r\n        selector: 'author',\r\n        sortable: true,\r\n        width: '20%',\r\n    },\r\n     {\r\n        name: 'Published On',\r\n        selector: 'publishedAt',\r\n        sortable: true,\r\n        width: '20%',\r\n        right: true,\r\n    }\r\n    ];\r\n    MessagePopUp = (data) =>{\r\n        this.setState({visible:true, data})\r\n    }\r\n    MessageClosePopUp = (data) =>{\r\n        this.setState({visible:false, data})\r\n    }\r\n\r\n    render(){\r\n        const Data= this.props.data;\r\n        return(\r\n            this.state.visible ? \r\n            <DetailsView data={this.state.data.data} MessageClosePopUp={this.MessageClosePopUp}/> :\r\n            Data &&\r\n        <DataTable\r\n            title=\"News\"\r\n            columns={this.columns}\r\n            data={Data}\r\n            responsive={true}\r\n            highlightOnHover={true}\r\n            pointerOnHover={true}\r\n            striped={true}\r\n            overflowY={true}\r\n            overflowYOffset={true}\r\n            expandableRows={true}\r\n            expandableRowsComponent={<ExpanableComponent MessagePopUp={this.MessagePopUp}/>}\r\n            paginationDefaultPage={true}\r\n            noHeader={false}\r\n        />\r\n        )\r\n    }\r\n}\r\n\r\nexport default Data;","import React from 'react';\r\nimport { Dimmer, Loader } from 'semantic-ui-react';\r\n\r\nconst ProgressLoader = (props) => {\r\n  const { message, ...rest } = props;\r\n  return (\r\n    <Dimmer className=\"loaderClass\" active inverted {...rest}><Loader inverted>{message || 'Loading'}</Loader></Dimmer>\r\n  );\r\n};\r\n\r\nexport default ProgressLoader;\r\n","import React from 'react';\r\nimport { isEmpty } from 'lodash';\r\nimport Data from './Data';\r\nimport ProgressLoader from './ProgressLoader';\r\n\r\nclass Home extends React.PureComponent {\r\n    constructor(props){\r\n        super(props);\r\n        this.state={};\r\n    }\r\n    componentDidMount(){\r\n        fetch(`https://newsapi.org/v2/everything?q=bitcoin&from=2019-11-04&sortBy=publishedAt&apiKey=a2a391168f444629b011ab5607de01e7`)\r\n        .then(response => response.json())\r\n        .then(data=> !isEmpty(data) && this.setState({data:data.articles}))\r\n        .catch(error => console.log(error))\r\n        }\r\n\r\n    render() {\r\n        return (\r\n            <div style={{display: \"flex\", justifyContent: 'center', alignItems: 'center'}}>\r\n                {!this.state.data && <ProgressLoader  style={{height: '500px'}}/>}\r\n                {this.state.data && <Data data={this.state.data}/>}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Home\r\n","import React from 'react';\nimport Home from '../src/components/Home';\nimport './App.css'; \nfunction App() {\n  return (\n      <Home/>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}